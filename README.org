#+TITLE:	README for testGrid
#+AUTHOR:	hanuomk2(odaba)
#+DATE:		2020-03-03

*testGrid

 - グリッドの描画等はGridGestureGUIクラス("gridgesturegui.h"ファイル)を
   "main.cpp"ファイルにてqmlRegisterType()でエレメント登録しています
   
 - GridGestureGUIクラスでは、コンストラスタであらかじめ
   グリッド上の各x,y座標の一点一点ごとに配置ガイドのパターン(位置とサイズ)を作成しています
   (createPatternMap())
   具体的には、グリッドを4x4の領域に分割し、その分割した領域のそれぞれに
   下図のように16進数のパターンNo.を割り当てます。パターンNo.を16進数で加算し、
   グリッド上のx,y座標に応じた配置ガイドのパターンを作成しています
   (例えば、中央の点付近にマウスオーバー(マウスカーソルを移動)させた場合のパターンは0xFFFF,
    中央の線分(左側)付近にマウスオーバー(マウスカーソルを移動)させた場合のパターンは0x3333,)
    中央の線分(右側)付近にマウスオーバー(マウスカーソルを移動)させた場合のパターンは0xCCCC等)
    |0x0001|0x0002|0x0004|0x0008|
    |------+------+------+------|
    |0x0010|0x0020|0x0040|0x0080|
    |------+------+------+------|
    |0x0100|0x0200|0x0400|0x0800|
    |------+------+------+------|
    |0x1000|0x2000|0x4000|0x8000|
    
 - 配置ガイドの描画は、paint()で行っています
 
 - 配置ガイドのx,y座標、サイズ(幅、高さ)は配置ガイドのパターンを基にして
   それぞれXXfromPattern(), YYfromPattern(), WWfromPattern(), HHfromPattern()
   で算出しています
   
 - スクリーンショットはScreenShotクラス("screenshot.h"ファイル)を
   "main.cpp"ファイルにてqmlRegisterType()でエレメント登録しています
 
 - スクリーンショットは、アプリケーションをアクティブにし、Enterキーを押下すると、
   実行ファイルのあるフォルダに"Screenshots"フォルダを作成し、JPGファイルとして保存します
   (ファイル名は現在時刻を基に作成)
 
 - "main.qml"ファイルでは、画像ファイルがドラッグされ、アプリケーションの領域内で
   マウスオーバー(マウスカーソル移動)させると(onEntered:, onPositionChange:)、
   マウス位置に応じた配置ガイドのパターンを取得します(update()でpaint()を呼び出します)
   
 - 外部から画像ファイルがドロップされるとcreateComponet(), createObject()で
   動的にコンポーネント("gridPartsImage.qml"ファイル)を作成します

 - 一度外部からドロップ(配置)された画像ファイルは再ドロップ(再配置)できます
   (objectNameでドロップ(配置)済の画像ファイルか否かを判定)

 - 縦長の画像ファイルは強制的に90度回転させて、横長の画像として配置
   (dropComponent())

** コメント

いくつものサムネイル画像を簡単に好きな位置に好きなサイズで配置して一つの画像にしたいと思って作成した
アプリケーションです(具体的な用途は、システム手帳貼り付け用のシール作成)
市販のアプリケーションだと自由度が少ないし、WORDだと毎回手間なので…
最近のスマホだと撮影画像のアスペクト比って、色々違うので、そのへんはconstにしておきました

今回、作成した画像はシール用紙に印刷して、ハサミで切り取るつもりなので、
縦長の画像ファイルは強制的に90度回転させて、横長の画像として配置しています
(縦長のままでもいいのですが、そうすると一枚のシール用紙に綺麗に収まらない)
サムネイル画像をタイル状に並べた画像を作りたい場合の用途としては、足りないですが、
この場合は違うコンセプトのアプリケーションにした方が良さそうです

** 画面

 [[file:testGrid.jpg]] 
